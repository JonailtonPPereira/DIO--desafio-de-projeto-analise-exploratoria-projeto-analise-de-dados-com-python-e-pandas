# -*- coding: utf-8 -*-
"""Análise_Exploratória.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U43LFNxp2Sl51LMbRapumNHW9iL19TE9
"""

# Importando as bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use("seaborn")

# Upload de arquivo
# É upado como arquivo temporário
from google.colab import files
arq = files.upload()

# Criando nosso DataFrame
df = pd.read_excel("AdventureWorks.xlsx")

# Visualizando as 5 primeiras linhas
df.head()

# quantidade de linhas e colunas
df.shape

# Verificando os tipos de dados
df.dtypes

# Qual a receita total
df["Valor Venda"].sum()

# Criando uma coluna custo
df["Custo"] = df["Custo Unitário"].mul(df["Quantidade"])

df.head()

# Custo total
# O 2 indica a quantidade de casas decimais
round(df["Custo"].sum(), 2)

# Calculando o lucro total
# Adicionando coluna de lucro = Receita - Custo
df["Lucro"] = df["Valor Venda"] - df["Custo"]

df.head(1)

# Total Lucro
round(df["Lucro"].sum(), 2)

# Criando uma coluna com o total de dias para enviar o produto
df["Tempo Envio"] = df["Data Envio"] - df["Data Venda"]

df.head(1)

"""**Agora queremos saber a média do tempo de envio para cada marca, e por isso, precisamos transformar a caluna Tempo Envio em numérica**"""

# Extraindo apenas os dias
df["Tempo Envio"] = (df["Data Envio"] - df["Data Venda"]).dt.days

df.head(1)

# Verificando o tipo da coluna Tempo Envio
df["Tempo Envio"].dtype

# Média do tempo de envio por marca
df.groupby("Marca")["Tempo Envio"].mean()

"""**Missing Values**"""

# Verificando se temos dados faltantes
df.isnull().sum()

"""**E, se a gente quiser saber o Lucro por Ano e por Marca**"""

# Vamos agrupar po ano e marca
df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum()

# configurando o formato dos números flutuantes
pd.options.display.float_format = "{:20,.2f}".format

# Resetando o index
lucro_ano = df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum().reset_index()
lucro_ano

# Qual o total de produtos vendidos?
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=False)

# Gráfico com total de produtos vendidos
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=True).plot.barh(title="Total de Produtos Vendidos")
plt.xlabel("Total")
plt.ylabel("Produto");

# Gráfico de barras vertical de lucro por ano
df.groupby(df["Data Venda"].dt.year)["Lucro"].sum().plot.bar(title="Lucro Por Ano")
plt.xlabel("Ano")
plt.ylabel("Receita");

df.groupby(df["Data Venda"].dt.year)["Lucro"].sum()

# Selecionando apenas as vendas de 2009
df_2009 = df[df["Data Venda"].dt.year == 2009]

df_2009.head()

# Gráfio de linhas --> Sempre que quiser um gráfico de linhas, passamos apenas o "plot"
df_2009.groupby(df_2009["Data Venda"].dt.month)["Lucro"].sum().plot(title="Lucro por Mês")
plt.xlabel("Mês")
plt.ylabel("Lucro");

# Gráfico de barras de lucro por marca
# O xticks foi passado para que a legenda das colunas fiquem na horizontal, já que por padrão as mesmas vêm na vertical
df_2009.groupby("Marca")["Lucro"].sum().plot.bar(title="Lucro por Marca")
plt.xlabel("Marca")
plt.ylabel("Lucro")
plt.xticks(rotation="horizontal");

# Gráfico de lucro por classe
df_2009.groupby("Classe")["Lucro"].sum().plot.bar(title="Lucro por Classe")
plt.xlabel("Classe")
plt.ylabel("Lucro")
plt.xticks(rotation="horizontal");

# Retornando uma descrição estatística da base de dados
df["Tempo Envio"].describe()

# Gráfico de Boxplot
plt.boxplot(df["Tempo Envio"]);

# Histograma
plt.hist(df["Tempo Envio"]);

# Tempo mínimo de envio
df["Tempo Envio"].min()

# Tempo máximo de envio
df["Tempo Envio"].max()

# Retornando o Outlier
df[df["Tempo Envio"] == 20]

# Salvando alterações em um csv
df.to_csv("df_vendas_novo.csv", index=False)